using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace SpellforceGameDataEditor2k16
{


    public static partial class Vars
    {
        public static string GameDataPath;       
        public static byte[] GameDataFile; //docelowo: public static List<byte> GameDataFile = new List<byte>();
        public static int CurrentOffset;

        public static byte[] Header = new byte[27];
        public static byte[] Unk1 = new byte[2];
        public static List<Spell> SpellList = new List<Spell>();
        public static byte[] Unk2 = new byte[6];

        public static int SpellLength = 76;
        public static int SpellCount;
        public static int SpellUILength = 75;
        public static int SpellUICount;

        
    }

    public class Spell //(76 B)
    {
        public byte[] EffectID = new byte[2];
        public byte[] TypeID = new byte[2];
        public byte[] Reqs = new byte[12];
        public byte[] Mana = new byte[2];
        public byte[] CastingTime = new byte[4];
        public byte[] RecastTime = new byte[4];
        public byte[] MinRange = new byte[2];
        public byte[] MaxRange = new byte[2];
        public byte[] CastingType = new byte[2];
        public byte[] Stats = new byte[44];
    }

    public class SpellUI //(75 B)
    {
        public byte[] TypeID = new byte[2];
        public byte[] NameID = new byte[2];
        public byte[] Spellline = new byte[2];
        public byte[] Sorting = new byte[3];
        public byte[] UIName = new byte[64];
        public byte[] Unknown = new byte[2];
    }

    public partial class MainForm : Form
    {        

        public MainForm()
        {
            InitializeComponent();
        }

        public void GameDataPathButton_Click(object sender, EventArgs e)
        {            
            DialogResult userClickedOK = GameDataOpen.ShowDialog();
            if (userClickedOK == DialogResult.OK)
            {
                Vars.GameDataPath = GameDataOpen.FileName;
                GameDataPathTextBox.Text = Vars.GameDataPath;
                GameDataPathStatus.BackColor = System.Drawing.Color.Lime;
                GameDataBackupButton.Enabled = true;
                GameDataLoadButton.Enabled = true;
            }
        }

        public void GameDataBackupButton_Click(object sender, EventArgs e)
        {
            File.Copy(Vars.GameDataPath, Vars.GameDataPath + ".bak", true);
            GameDataBackupStatus.BackColor = System.Drawing.Color.Lime;
        }

        public void GameDataLoadButton_Click(object sender, EventArgs e)
        {
            //trzeba całkowicie przepisać wczytywanie
            Vars.GameDataFile = File.ReadAllBytes(Vars.GameDataPath);

            for (int i = 0; i < 27; i++)
                Vars.Header[i] = Vars.GameDataFile[i];
            Vars.SpellCount = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(26, 4)) / Vars.SpellLength;

            for (int i = 30; i <= 31; i++)
                Vars.Unk1[i - 30] = Vars.GameDataFile[i];

            Vars.CurrentOffset = 32; //przeskok do offsetu 32, gdyż nie wiemy co to za bajty {0x1E, 0x1F}
            for (int i = 0; i < Vars.SpellCount; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(32 + i * Vars.SpellLength, Vars.SpellLength);
                Spell spell = new Spell();
                
                for (int j = 0; j < Vars.SpellLength; j++)
                {
                    if (j >= 0 && j < 2)
                        spell.EffectID[j] = spellData[j];
                    else if (j >= 2 && j < 4)
                        spell.TypeID[j - 2] = spellData[j];
                    else if (j >= 4 && j < 16)
                        spell.Reqs[j - 4] = spellData[j];
                    else if (j >= 16 && j < 18)
                        spell.Mana[j - 16] = spellData[j];
                    else if (j >= 18 && j < 22)
                        spell.CastingTime[j - 18] = spellData[j];
                    else if (j >= 22 && j < 26)
                        spell.RecastTime[j - 22] = spellData[j];
                    else if (j >= 26 && j < 28)
                        spell.MinRange[j - 26] = spellData[j];
                    else if (j >= 28 && j < 30)
                        spell.MaxRange[j - 28] = spellData[j];
                    else if (j >= 30 && j < 32)
                        spell.CastingType[j - 30] = spellData[j];
                    else if (j >= 32 && j < 76)
                        spell.Stats[j - 32] = spellData[j];
                }
                Vars.SpellList.Add(spell);
            }
            Vars.CurrentOffset += Vars.SpellLength * Vars.SpellCount;

            for (int i = Vars.CurrentOffset; i < Vars.CurrentOffset + 6; i++)
                Vars.Unk2[i - Vars.CurrentOffset] = Vars.GameDataFile[i];

            Vars.CurrentOffset += 6;














            GameDataLoadStatus.BackColor = Color.Lime;
            GameDataDumpButton.Enabled = true;
        }

        public void GameDataDumpButton_Click(object sender, EventArgs e)
        {
            File.WriteAllBytes(Vars.GameDataPath, Vars.GameDataFile);
            GameDataDumpStatus.BackColor = System.Drawing.Color.Lime;
            DialogResult userClickedOK = MessageBox.Show("Thanks for using our software!", "Bye!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            if (userClickedOK == DialogResult.OK)
            {
                Environment.Exit(-1);
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            
        }
    }
}
