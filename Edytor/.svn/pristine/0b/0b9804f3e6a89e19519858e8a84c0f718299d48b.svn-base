using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;


namespace SpellforceGameDataEditor2k16
{
    public partial class MainForm : Form
    {        
        
        public MainForm()
        {
            InitializeComponent();
        }             

        public void GameDataPathButton_Click(object sender, EventArgs e)
        {            
            DialogResult userClickedOK = GameDataOpen.ShowDialog();
            if (userClickedOK == DialogResult.OK)
            {
                Vars.GameDataPath = GameDataOpen.FileName;
                GameDataPathTextBox.Text = Vars.GameDataPath;
                GameDataPathStatus.BackColor = System.Drawing.Color.Lime;
                GameDataBackupButton.Enabled = true;
                GameDataLoadButton.Enabled = true;
            }
        }

        public void GameDataBackupButton_Click(object sender, EventArgs e)
        {
            File.Copy(Vars.GameDataPath, Vars.GameDataPath + ".bak", true);
            GameDataBackupStatus.BackColor = System.Drawing.Color.Lime;
        }

        public void GameDataLoadButton_Click(object sender, EventArgs e)
        {
            //trzeba całkowicie przepisać wczytywanie
            Vars.GameDataFile = File.ReadAllBytes(Vars.GameDataPath);

            for (Vars.CurrentOffset = 0; Vars.CurrentOffset < 26; Vars.CurrentOffset++)
                Vars.Header[Vars.CurrentOffset] = Vars.GameDataFile[Vars.CurrentOffset];

            Spell.Count = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(Vars.CurrentOffset, 4)) / Spell.Length;
            Vars.CurrentOffset += 4;

            Utils.AddUnknown(2);

            for (int i = 0; i < Spell.Count; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(Vars.CurrentOffset + i * Spell.Length, Spell.Length);
                Spell spell = new Spell();
                spell.EffectID = spellData.SubArray(0, 2);
                spell.TypeID = spellData.SubArray(2, 2);
                spell.Reqs = spellData.SubArray(4, 12);
                spell.Mana = spellData.SubArray(16, 2);
                spell.CastingTime = spellData.SubArray(18, 4);
                spell.RecastTime = spellData.SubArray(22, 4);
                spell.MinRange = spellData.SubArray(26, 2);
                spell.MaxRange = spellData.SubArray(28, 2);
                spell.CastingType = spellData.SubArray(30, 2);
                spell.Stats = spellData.SubArray(32, 44);
                Vars.SpellList.Add(spell);
            }
            Vars.CurrentOffset += Spell.Length * Spell.Count;

            Utils.AddUnknown(6);

            SpellUI.Count = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(Vars.CurrentOffset, 4)) / SpellUI.Length;
            Vars.CurrentOffset += 4;

            Utils.AddUnknown(2);

            for (int i = 0; i < SpellUI.Count; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(Vars.CurrentOffset + i * SpellUI.Length, SpellUI.Length);
                SpellUI spellui = new SpellUI();
                spellui.TypeID = spellData.SubArray(0, 2);
                spellui.NameID = spellData.SubArray(2, 2);
                spellui.Spellline = spellData.SubArray(4, 2);
                spellui.Sorting = spellData.SubArray(6, 3);
                spellui.UIName = spellData.SubArray(9, 64);
                spellui.Unknown = spellData.SubArray(73, 2);                
                Vars.SpellUIList.Add(spellui);
            }
            Vars.CurrentOffset += SpellUI.Length * SpellUI.Count;

            Utils.AddUnknown(30);

            UnitStats.Count = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(Vars.CurrentOffset, 4)) / UnitStats.Length;
            Vars.CurrentOffset += 4;

            for (int i = 0; i < UnitStats.Count; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(Vars.CurrentOffset + i * UnitStats.Length, UnitStats.Length);
                UnitStats unitstats = new UnitStats();
                unitstats.StatsID = spellData.SubArray(0, 2);
                unitstats.Level = spellData.SubArray(2, 2);
                unitstats.RaceID = spellData.SubArray(4, 1);
                unitstats.Attribute = spellData.SubArray(5, 14);
                unitstats.Unknown = spellData.SubArray(19, 2);
                unitstats.Resistance = spellData.SubArray(21, 8);
                unitstats.Speeds = spellData.SubArray(29, 6);
                unitstats.Size = spellData.SubArray(35, 2);
                unitstats.Unknown2 = spellData.SubArray(37, 2);
                unitstats.SpawningTime = spellData.SubArray(39, 4);
                unitstats.Gender = spellData.SubArray(43, 1);
                unitstats.HeadID = spellData.SubArray(44, 2);
                unitstats.SlotsID = spellData.SubArray(46, 1);

                Vars.UnitStatsList.Add(unitstats);
            }
            Vars.CurrentOffset += UnitStats.Length * UnitStats.Count;


            GameDataLoadStatus.BackColor = Color.Lime;
            GameDataDumpButton.Enabled = true;
        }

        public void GameDataDumpButton_Click(object sender, EventArgs e)
        {
            File.WriteAllBytes(Vars.GameDataPath, Vars.GameDataFile);
            GameDataDumpStatus.BackColor = System.Drawing.Color.Lime;
            DialogResult userClickedOK = MessageBox.Show("Thanks for using our software!", "Bye!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            if (userClickedOK == DialogResult.OK)
            {
                Environment.Exit(-1);
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            
        }
    }


}
