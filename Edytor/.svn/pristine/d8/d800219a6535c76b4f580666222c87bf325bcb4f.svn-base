using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace SpellforceGameDataEditor2k16
{


    public static partial class Vars
    {
        public static string GameDataPath;       
        public static byte[] GameDataFile; //docelowo: public static List<byte> GameDataFile = new List<byte>();
        public static int CurrentOffset;

        public static byte[] Header = new byte[27];
        public static byte[] Unk1 = new byte[2];
        public static List<Spell> SpellList = new List<Spell>();
        public static byte[] Unk2 = new byte[6];
        public static List<SpellUI> SpellUIList = new List<SpellUI>();

    }

    public class Spell
    {
        public static int Length = 76;
        public static int Count;

        public byte[] EffectID = new byte[2];
        public byte[] TypeID = new byte[2];
        public byte[] Reqs = new byte[12];
        public byte[] Mana = new byte[2];
        public byte[] CastingTime = new byte[4];
        public byte[] RecastTime = new byte[4];
        public byte[] MinRange = new byte[2];
        public byte[] MaxRange = new byte[2];
        public byte[] CastingType = new byte[2];
        public byte[] Stats = new byte[44];
    }

    public class SpellUI
    {
        public static int Length = 75;
        public static int Count;

        public byte[] TypeID = new byte[2];
        public byte[] NameID = new byte[2];
        public byte[] Spellline = new byte[2];
        public byte[] Sorting = new byte[3];
        public byte[] UIName = new byte[64];
        public byte[] Unknown = new byte[2];
    }

    public partial class MainForm : Form
    {        

        public MainForm()
        {
            InitializeComponent();
        }

        public void GameDataPathButton_Click(object sender, EventArgs e)
        {            
            DialogResult userClickedOK = GameDataOpen.ShowDialog();
            if (userClickedOK == DialogResult.OK)
            {
                Vars.GameDataPath = GameDataOpen.FileName;
                GameDataPathTextBox.Text = Vars.GameDataPath;
                GameDataPathStatus.BackColor = System.Drawing.Color.Lime;
                GameDataBackupButton.Enabled = true;
                GameDataLoadButton.Enabled = true;
            }
        }

        public void GameDataBackupButton_Click(object sender, EventArgs e)
        {
            File.Copy(Vars.GameDataPath, Vars.GameDataPath + ".bak", true);
            GameDataBackupStatus.BackColor = System.Drawing.Color.Lime;
        }

        public void GameDataLoadButton_Click(object sender, EventArgs e)
        {
            //trzeba całkowicie przepisać wczytywanie
            Vars.GameDataFile = File.ReadAllBytes(Vars.GameDataPath);

            for (Vars.CurrentOffset = 0; Vars.CurrentOffset < 26; Vars.CurrentOffset++)
                Vars.Header[Vars.CurrentOffset] = Vars.GameDataFile[Vars.CurrentOffset];

            Spell.Count = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(Vars.CurrentOffset, 4)) / Spell.Length;
            Vars.CurrentOffset += 4;

            for (int i = 0; i < 2; i++)
                Vars.Unk1[i] = Vars.GameDataFile[Vars.CurrentOffset++];

            for (int i = 0; i < Spell.Count; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(Vars.CurrentOffset + i * Spell.Length, Spell.Length);
                Spell spell = new Spell();
                spell.EffectID = spellData.SubArray(0, 2);
                spell.TypeID = spellData.SubArray(2, 2);
                spell.Reqs = spellData.SubArray(4, 12);
                spell.Mana = spellData.SubArray(16, 2);
                spell.CastingTime = spellData.SubArray(18, 4);
                spell.RecastTime = spellData.SubArray(22, 4);
                spell.MinRange = spellData.SubArray(26, 2);
                spell.MaxRange = spellData.SubArray(28, 2);
                spell.CastingType = spellData.SubArray(30, 2);
                spell.Stats = spellData.SubArray(32, 44);
                Vars.SpellList.Add(spell);
            }
            Vars.CurrentOffset += Spell.Length * Spell.Count;

            for (int i = Vars.CurrentOffset; i < Vars.CurrentOffset + 6; i++)
                Vars.Unk2[i - Vars.CurrentOffset] = Vars.GameDataFile[i];

            Vars.CurrentOffset += 6;

            //for (int i = 0; i < 5; i++)
            //    Vars.Unk2[i] = Vars.GameDataFile[Vars.CurrentOffset++];

            // SpellUI
            SpellUI.Count = Utils.LittleEndianToInt(Vars.GameDataFile.SubArray(Vars.CurrentOffset, 4)) / SpellUI.Length;


            for (int i = 0; i < SpellUI.Count; i++)
            {
                byte[] spellData = Vars.GameDataFile.SubArray(Vars.CurrentOffset + i * SpellUI.Length, SpellUI.Length);
                SpellUI spellui = new SpellUI();
                spellui.TypeID = spellData.SubArray(0, 2);
                spellui.NameID = spellData.SubArray(2, 2);
                spellui.Spellline = spellData.SubArray(4, 2);
                spellui.Sorting = spellData.SubArray(6, 3);
                spellui.UIName = spellData.SubArray(9, 64);
                spellui.Unknown = spellData.SubArray(73, 2);
                
                Vars.SpellUIList.Add(spellui);
            }
            Vars.CurrentOffset += SpellUI.Length * SpellUI.Count;

            for (int i = Vars.CurrentOffset; i < Vars.CurrentOffset + 6; i++)
                Vars.Unk2[i - Vars.CurrentOffset] = Vars.GameDataFile[i];

            // END OF SpellUI


            GameDataLoadStatus.BackColor = Color.Lime;
            GameDataDumpButton.Enabled = true;
        }

        public void GameDataDumpButton_Click(object sender, EventArgs e)
        {
            File.WriteAllBytes(Vars.GameDataPath, Vars.GameDataFile);
            GameDataDumpStatus.BackColor = System.Drawing.Color.Lime;
            DialogResult userClickedOK = MessageBox.Show("Thanks for using our software!", "Bye!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            if (userClickedOK == DialogResult.OK)
            {
                Environment.Exit(-1);
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            
        }
    }
}
